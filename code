class Segment {
  int xPos;
  int yPos;
  Segment ( int xPos, int yPos){
   this.xPos = xPos;
   this.yPos = yPos;
  }
  public int getXPos(){
    return this.xPos;
  }
  public int getYPos(){
    return this.yPos;
  }
  public void setXPos(int xPos){
    this.xPos=xPos;
  }
  public void setYPos(int yPos){
    this.yPos = yPos;
  }
}
Segment head;
String direction = "right";
int stomach = 1;
int foodX =((int)random(50)*10);
int foodY =((int)random(50)*10);



void setup(){
  size(500,500);
  head = new Segment(0,250);
  frameRate(20);
}


void draw(){
  if(end == false){
    background(0);
    manageTail();
    drawFood();
    drawSnake();
    move();
    collision();
  }
}

void drawFood(){
  fill(200,30,30);
  rect(foodX,foodY,10,10);
}


void drawSnake(){
  fill(30,200,30);
  rect(head.getXPos(),head.getYPos(),10,10);
}


void move(){
  switch(direction){
    case "up":
      tailX.add(head.xPos);
      tailY.add(head.yPos);
      head.yPos = head.yPos - 10;
      break;
    case "down":
      tailX.add(head.xPos);
      tailY.add(head.yPos);
      head.yPos = head.yPos + 10;
      break;
    case "left":
      tailX.add(head.xPos);
      tailY.add(head.yPos);
      head.xPos = head.xPos - 10;
      break;
    case "right":
      tailX.add(head.xPos);
      tailY.add(head.yPos);
      head.xPos = head.xPos + 10;
      break;
  }
}

void keyPressed(){
  if (key == CODED) {
    if (keyCode == UP && direction != "down"){
      direction = "up";
    }
    else if (keyCode == DOWN && direction != "up"){
      direction = "down";
    }
    else if (keyCode == RIGHT && direction != "left"){
      direction = "right";
    }
    else if (keyCode == LEFT && direction != "right"){
      direction = "left";
    }
  }
}


void collision(){
  if (head.xPos == foodX && head.yPos == foodY){
    stomach++;
    foodX = ((int)random(50)*10);
    foodY = ((int)random(50)*10);
  }
  
}  

ArrayList <Segment> tail = new ArrayList<Segment>();
ArrayList <Integer> tailX = new ArrayList<Integer>();
ArrayList <Integer> tailY = new ArrayList<Integer>();

void manageTail(){
  drawTail();
  checkTailCollision();
  Segment a = new Segment(head.xPos,head.yPos);
  tail.add(a);
  if (tail.size() > stomach){
    tail.remove(0);
    tailX.remove(0);
    tailY.remove(0);
  }
  
}

void drawTail(){
  for(int i = 0; i<tail.size(); i++){
    
    rect(tailX.get(i),tailY.get(i),10,10);
  }
}
void checkTailCollision(){
  for(int i=0; i<tailX.size()-1; i++){
     if(head.xPos==tailX.get(i)&&head.yPos==tailY.get(i)){
       gameOver();
     }
  }
  if(head.xPos>501 || head.xPos<-1){
    gameOver();
  }
  if(head.yPos>501 || head.yPos<-1){
    gameOver();
  }
}
boolean end = false;
void gameOver(){
  end = true;
  fill(0,0,0);
  rect(0,0,500,500);
  fill(30,200,30);
  textSize(50);
  text("GAME OVER",110,240);
}

